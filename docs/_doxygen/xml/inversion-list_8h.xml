<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="inversion-list_8h" kind="file" language="C++">
    <compoundname>inversion-list.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>include/inversion-list.h</label>
        <link refid="inversion-list_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" prot="public" static="no">
        <type>struct _InversionList</type>
        <definition>typedef struct _InversionList InversionList</definition>
        <argsstring></argsstring>
        <name>InversionList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>InversionList</computeroutput> is an opaque structure able to handle sets of unsigned integers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="14" column="29" bodyfile="include/inversion-list.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" prot="public" static="no">
        <type>struct _InversionListIterator</type>
        <definition>typedef struct _InversionListIterator InversionListIterator</definition>
        <argsstring></argsstring>
        <name>InversionListIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>InversionListIterator</computeroutput> is an structure who iterate each integers in InversionList </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="18" column="37" bodyfile="include/inversion-list.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" prot="public" static="no">
        <type>struct _InversionListCoupleIterator</type>
        <definition>typedef struct _InversionListCoupleIterator InversionListCoupleIterator</definition>
        <argsstring></argsstring>
        <name>InversionListCoupleIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>InversionListCoupleIterator</computeroutput> is an structure who iterate each couple in InversionList </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="22" column="43" bodyfile="include/inversion-list.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="inversion-list_8h_1a2bc226a34f343c83f0091bd349d2e3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_init</definition>
        <argsstring>(void)</argsstring>
        <name>inversion_list_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise the library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="27" column="13" declfile="include/inversion-list.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a19ffeb389a51a54843b7e1760940c0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_finish</definition>
        <argsstring>(void)</argsstring>
        <name>inversion_list_finish</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate the library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="31" column="13" declfile="include/inversion-list.h" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a1ed11d969907d7cc451fba515468d578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_create</definition>
        <argsstring>(unsigned int capacity, size_t count, const unsigned int *values)</argsstring>
        <name>inversion_list_create</name>
        <param>
          <type>unsigned int</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a set of integers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the capacity not to be reached </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements of <computeroutput>values</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>the values to be inserted in the set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new set of integers or <computeroutput>NULL</computeroutput> if there is an error</para>
</simplesect>
<simplesect kind="note"><para>a <computeroutput>NULL</computeroutput> return indicates an error which can be retrieved in <computeroutput>errno</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="44" column="22" declfile="include/inversion-list.h" declline="44" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a072264e79aaff89bde71422a83b57702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inversion_list_destroy</definition>
        <argsstring>(InversionList *set)</argsstring>
        <name>inversion_list_destroy</name>
        <param>
          <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a set of integers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>the set to be destroyed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="50" column="13" declfile="include/inversion-list.h" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a06778b8c6da5d5e46bed2a3bcf457f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int inversion_list_capacity</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_capacity</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the set capacity.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>the set whose capacity is requested</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput>set</computeroutput> capacity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="59" column="21" declfile="include/inversion-list.h" declline="59" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a62dfa31fa3b0c875dfec1a382504f0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int inversion_list_support</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_support</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the set support.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>the set whose support is requested</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the <computeroutput>set</computeroutput> support </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="67" column="21" declfile="include/inversion-list.h" declline="67" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1abbd132d28163e55e19fb1c555857e747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_member</definition>
        <argsstring>(const InversionList *set, unsigned int value)</argsstring>
        <name>inversion_list_member</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the membership of an element.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>the set for which the membership of the <computeroutput>value</computeroutput> is requested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the membership of the <computeroutput>value</computeroutput> in the <computeroutput>set</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="77" column="13" declfile="include/inversion-list.h" declline="77" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a8a2fc2f3411cb9d5cc99ae2d76d73c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_clone</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_clone</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a clone of set of integers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>a set whose clone is requested</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>set</computeroutput> clone or <computeroutput>NULL</computeroutput> if there is an error</para>
</simplesect>
<simplesect kind="note"><para>a <computeroutput>NULL</computeroutput> return indicates an error which can be retrieved in <computeroutput>errno</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="87" column="22" declfile="include/inversion-list.h" declline="87" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a36f6b34e7ff8fb73b2ee83153530cb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_complement</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_complement</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a complement of a set of integers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>a set whose complement is requested</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>set</computeroutput> complement or <computeroutput>NULL</computeroutput> if there is an error</para>
</simplesect>
<simplesect kind="note"><para>a <computeroutput>NULL</computeroutput> return indicates an error which can be retrieved in <computeroutput>errno</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="97" column="22" declfile="include/inversion-list.h" declline="97" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a199badaff9b07378dcf53910f3252142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * inversion_list_to_string</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_to_string</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a set of integers to a string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>a set whose string conversion is requested</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the string representation of <computeroutput>set</computeroutput> or <computeroutput>NULL</computeroutput> if there is an error or if <computeroutput>set</computeroutput> is equal to <computeroutput>NULL</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>a <computeroutput>NULL</computeroutput> return may indicate an error which can be retrieved in <computeroutput>errno</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="109" column="19" declfile="include/inversion-list.h" declline="109" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a05f72c85cd99ab4644102e110fff894b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_equal</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_equal</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the equality between two InversionList <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>first InversionList </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>second InversionList </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if set1 and set2 are equals, false in other cases </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="116" column="13" declfile="include/inversion-list.h" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1aeb649dc41cb35cefdc020da6ec80d51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_not_equal</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_not_equal</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the inequality between two InversionList <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>: first InversionList </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>: second InversionList </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if set1 and set2 are equals, true in other cases </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="123" column="13" declfile="include/inversion-list.h" declline="123" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a83e835ef1209134d3bce332c9088c11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_less</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_less</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="130" column="13" declfile="include/inversion-list.h" declline="130" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1ac366621cd0fcba7c7370bfeb68b88e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_less_equal</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_less_equal</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="137" column="13" declfile="include/inversion-list.h" declline="137" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a52105c0dd7f451af824084a670e40078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_greater</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_greater</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="144" column="13" declfile="include/inversion-list.h" declline="144" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a92a94557d54111366a433c704e7f0cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_greater_equal</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_greater_equal</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="151" column="13" declfile="include/inversion-list.h" declline="151" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a4c9773ce2cbe0283c28f2e08ae9bccf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_disjoint</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_disjoint</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that 2 sets have no elements in common <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return true if no element of set 1 and in set 2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="158" column="13" declfile="include/inversion-list.h" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a75666c61858946910b542949cb67fc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_union</definition>
        <argsstring>(const InversionList *set,...)</argsstring>
        <name>inversion_list_union</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="167" column="22" declfile="include/inversion-list.h" declline="167" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a4a066d06357d97a27e8f8710e72e54ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_intersection</definition>
        <argsstring>(const InversionList *set,...)</argsstring>
        <name>inversion_list_intersection</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="176" column="22" declfile="include/inversion-list.h" declline="176" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1adae7a4826d711087ec856357022fb3f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_difference</definition>
        <argsstring>(const InversionList *set,...)</argsstring>
        <name>inversion_list_difference</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="184" column="22" declfile="include/inversion-list.h" declline="184" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1ac71de04c1a9fb1d70226e263ccfe1df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
        <definition>InversionList * inversion_list_symmetric_difference</definition>
        <argsstring>(const InversionList *set1, const InversionList *set2)</argsstring>
        <name>inversion_list_symmetric_difference</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the set consisting of elements belonging to set1 and set 2 but not belonging to the intersection of set1 and set2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="192" column="22" declfile="include/inversion-list.h" declline="192" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1ac9298cc1602312e8e1ce0b85cfd7b4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
        <definition>InversionListIterator * inversion_list_iterator_create</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_iterator_create</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="200" column="30" declfile="include/inversion-list.h" declline="200" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1aed23b925a89bdb6e0f611939f34c8454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inversion_list_iterator_destroy</definition>
        <argsstring>(InversionListIterator *iterator)</argsstring>
        <name>inversion_list_iterator_destroy</name>
        <param>
          <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="205" column="13" declfile="include/inversion-list.h" declline="205" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a244fb399ae9f390508b0ec5fab3f661c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
        <definition>InversionListIterator * inversion_list_iterator_next</definition>
        <argsstring>(InversionListIterator *iterator)</argsstring>
        <name>inversion_list_iterator_next</name>
        <param>
          <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="211" column="30" declfile="include/inversion-list.h" declline="211" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a8290de48285b911d1c518ce5aeaef58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
        <definition>InversionListIterator * inversion_list_iterator_rewind</definition>
        <argsstring>(InversionListIterator *iterator)</argsstring>
        <name>inversion_list_iterator_rewind</name>
        <param>
          <type><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="217" column="30" declfile="include/inversion-list.h" declline="217" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1af4bc190d4a68a3806b1769d06a56c44b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_iterator_valid</definition>
        <argsstring>(const InversionListIterator *iterator)</argsstring>
        <name>inversion_list_iterator_valid</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="223" column="13" declfile="include/inversion-list.h" declline="223" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1afab8feb391d2b07ce16717cc5c5e7e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int inversion_list_iterator_get</definition>
        <argsstring>(const InversionListIterator *iterator)</argsstring>
        <name>inversion_list_iterator_get</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="229" column="21" declfile="include/inversion-list.h" declline="229" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1af49c67742ed28a2dd5082ce46fc741ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
        <definition>InversionListCoupleIterator * inversion_list_couple_iterator_create</definition>
        <argsstring>(const InversionList *set)</argsstring>
        <name>inversion_list_couple_iterator_create</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows to create an InversionListCoupleIterator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>InversionListCoupleIterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="235" column="36" declfile="include/inversion-list.h" declline="235" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a66c190d97112c9ea755cc71455c74c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inversion_list_couple_iterator_destroy</definition>
        <argsstring>(InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_destroy</name>
        <param>
          <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows you to destroy InversionListCoupleIterator <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="240" column="13" declfile="include/inversion-list.h" declline="240" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1acaa690531ebb6d04d8117532cc815eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
        <definition>InversionListCoupleIterator * inversion_list_couple_iterator_next</definition>
        <argsstring>(InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_next</name>
        <param>
          <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows to have the terminal of the following couple <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next couple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="246" column="36" declfile="include/inversion-list.h" declline="246" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1aba8191f6a0e2787e0b457902cb2698b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
        <definition>InversionListCoupleIterator * inversion_list_couple_iterator_rewind</definition>
        <argsstring>(InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_rewind</name>
        <param>
          <type><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lets go back to the beginning <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>InversionListCoupleIterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="252" column="36" declfile="include/inversion-list.h" declline="252" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1adbbe3e8d16180b961a158352766839d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool inversion_list_couple_iterator_valid</definition>
        <argsstring>(const InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_valid</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the couple is valid <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the pair is valid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="258" column="13" declfile="include/inversion-list.h" declline="258" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1a39fb60573a583fbed3118f4046505b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int inversion_list_couple_iterator_get_inf</definition>
        <argsstring>(const InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_get_inf</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of lower couple <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of lower couple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="264" column="21" declfile="include/inversion-list.h" declline="264" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="inversion-list_8h_1acd2912341dd4bac1cbe7d11583c78349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int inversion_list_couple_iterator_get_sup</definition>
        <argsstring>(const InversionListCoupleIterator *iterator)</argsstring>
        <name>inversion_list_couple_iterator_get_sup</name>
        <param>
          <type>const <ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of superior couple <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of superoir couple </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/inversion-list.h" line="270" column="21" declfile="include/inversion-list.h" declline="270" declcolumn="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>INVERSION_LIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INVERSION_LIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_InversionList<sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref>;</highlight></codeline>
<codeline lineno="18" refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_InversionListIterator<sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref>;</highlight></codeline>
<codeline lineno="22" refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_InversionListCoupleIterator<sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="inversion-list_8h_1a2bc226a34f343c83f0091bd349d2e3c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a2bc226a34f343c83f0091bd349d2e3c2" kindref="member">inversion_list_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31" refid="inversion-list_8h_1a19ffeb389a51a54843b7e1760940c0c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a19ffeb389a51a54843b7e1760940c0c2" kindref="member">inversion_list_finish</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="inversion-list_8h_1a1ed11d969907d7cc451fba515468d578" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1a1ed11d969907d7cc451fba515468d578" kindref="member">inversion_list_create</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*values);</highlight></codeline>
<codeline lineno="50" refid="inversion-list_8h_1a072264e79aaff89bde71422a83b57702" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a072264e79aaff89bde71422a83b57702" kindref="member">inversion_list_destroy</ref>(<ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="inversion-list_8h_1a06778b8c6da5d5e46bed2a3bcf457f5d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a06778b8c6da5d5e46bed2a3bcf457f5d" kindref="member">inversion_list_capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="67" refid="inversion-list_8h_1a62dfa31fa3b0c875dfec1a382504f0b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a62dfa31fa3b0c875dfec1a382504f0b6" kindref="member">inversion_list_support</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="inversion-list_8h_1abbd132d28163e55e19fb1c555857e747" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1abbd132d28163e55e19fb1c555857e747" kindref="member">inversion_list_member</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="87" refid="inversion-list_8h_1a8a2fc2f3411cb9d5cc99ae2d76d73c89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1a8a2fc2f3411cb9d5cc99ae2d76d73c89" kindref="member">inversion_list_clone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="97" refid="inversion-list_8h_1a36f6b34e7ff8fb73b2ee83153530cb0e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1a36f6b34e7ff8fb73b2ee83153530cb0e" kindref="member">inversion_list_complement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="inversion-list_8h_1a199badaff9b07378dcf53910f3252142" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="inversion-list_8h_1a199badaff9b07378dcf53910f3252142" kindref="member">inversion_list_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="116" refid="inversion-list_8h_1a05f72c85cd99ab4644102e110fff894b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a05f72c85cd99ab4644102e110fff894b" kindref="member">inversion_list_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="123" refid="inversion-list_8h_1aeb649dc41cb35cefdc020da6ec80d51d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1aeb649dc41cb35cefdc020da6ec80d51d" kindref="member">inversion_list_not_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="130" refid="inversion-list_8h_1a83e835ef1209134d3bce332c9088c11a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a83e835ef1209134d3bce332c9088c11a" kindref="member">inversion_list_less</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="137" refid="inversion-list_8h_1ac366621cd0fcba7c7370bfeb68b88e9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ac366621cd0fcba7c7370bfeb68b88e9b" kindref="member">inversion_list_less_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="144" refid="inversion-list_8h_1a52105c0dd7f451af824084a670e40078" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a52105c0dd7f451af824084a670e40078" kindref="member">inversion_list_greater</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="151" refid="inversion-list_8h_1a92a94557d54111366a433c704e7f0cf6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a92a94557d54111366a433c704e7f0cf6" kindref="member">inversion_list_greater_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="158" refid="inversion-list_8h_1a4c9773ce2cbe0283c28f2e08ae9bccf9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a4c9773ce2cbe0283c28f2e08ae9bccf9" kindref="member">inversion_list_disjoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="inversion-list_8h_1a75666c61858946910b542949cb67fc28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1a75666c61858946910b542949cb67fc28" kindref="member">inversion_list_union</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set,<sp/>...);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="inversion-list_8h_1a4a066d06357d97a27e8f8710e72e54ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1a4a066d06357d97a27e8f8710e72e54ce" kindref="member">inversion_list_intersection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set,<sp/>...);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="inversion-list_8h_1adae7a4826d711087ec856357022fb3f0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1adae7a4826d711087ec856357022fb3f0" kindref="member">inversion_list_difference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set,<sp/>...);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="inversion-list_8h_1ac71de04c1a9fb1d70226e263ccfe1df5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*<ref refid="inversion-list_8h_1ac71de04c1a9fb1d70226e263ccfe1df5" kindref="member">inversion_list_symmetric_difference</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="inversion-list_8h_1ac9298cc1602312e8e1ce0b85cfd7b4ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*<ref refid="inversion-list_8h_1ac9298cc1602312e8e1ce0b85cfd7b4ef" kindref="member">inversion_list_iterator_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="205" refid="inversion-list_8h_1aed23b925a89bdb6e0f611939f34c8454" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1aed23b925a89bdb6e0f611939f34c8454" kindref="member">inversion_list_iterator_destroy</ref>(<ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="211" refid="inversion-list_8h_1a244fb399ae9f390508b0ec5fab3f661c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*<ref refid="inversion-list_8h_1a244fb399ae9f390508b0ec5fab3f661c" kindref="member">inversion_list_iterator_next</ref>(<ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="217" refid="inversion-list_8h_1a8290de48285b911d1c518ce5aeaef58c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*<ref refid="inversion-list_8h_1a8290de48285b911d1c518ce5aeaef58c" kindref="member">inversion_list_iterator_rewind</ref>(<ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="223" refid="inversion-list_8h_1af4bc190d4a68a3806b1769d06a56c44b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1af4bc190d4a68a3806b1769d06a56c44b" kindref="member">inversion_list_iterator_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="229" refid="inversion-list_8h_1afab8feb391d2b07ce16717cc5c5e7e8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1afab8feb391d2b07ce16717cc5c5e7e8a" kindref="member">inversion_list_iterator_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1ace83dc8e112d4376c1f01b110899dd0f" kindref="member">InversionListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="235" refid="inversion-list_8h_1af49c67742ed28a2dd5082ce46fc741ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*<ref refid="inversion-list_8h_1af49c67742ed28a2dd5082ce46fc741ec" kindref="member">inversion_list_couple_iterator_create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a7a01e1fa072b13ae68a85f54ed69380c" kindref="member">InversionList</ref><sp/>*set);</highlight></codeline>
<codeline lineno="240" refid="inversion-list_8h_1a66c190d97112c9ea755cc71455c74c31" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a66c190d97112c9ea755cc71455c74c31" kindref="member">inversion_list_couple_iterator_destroy</ref>(<ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="246" refid="inversion-list_8h_1acaa690531ebb6d04d8117532cc815eca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*<ref refid="inversion-list_8h_1acaa690531ebb6d04d8117532cc815eca" kindref="member">inversion_list_couple_iterator_next</ref>(<ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="252" refid="inversion-list_8h_1aba8191f6a0e2787e0b457902cb2698b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*<ref refid="inversion-list_8h_1aba8191f6a0e2787e0b457902cb2698b2" kindref="member">inversion_list_couple_iterator_rewind</ref>(<ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="258" refid="inversion-list_8h_1adbbe3e8d16180b961a158352766839d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adbbe3e8d16180b961a158352766839d2" kindref="member">inversion_list_couple_iterator_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="264" refid="inversion-list_8h_1a39fb60573a583fbed3118f4046505b03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1a39fb60573a583fbed3118f4046505b03" kindref="member">inversion_list_couple_iterator_get_inf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="270" refid="inversion-list_8h_1acd2912341dd4bac1cbe7d11583c78349" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1acd2912341dd4bac1cbe7d11583c78349" kindref="member">inversion_list_couple_iterator_get_sup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="inversion-list_8h_1adcfd22691e34fa430db5da9e53f34155" kindref="member">InversionListCoupleIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>INVERSION_LIST_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/inversion-list.h"/>
  </compounddef>
</doxygen>
